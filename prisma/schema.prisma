// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your chosen database (e.g., mysql)
  url      = env("DATABASE_URL")
}

// --------------------
// ENUMS
// --------------------

enum UserRole {
  SUPER_ADMIN
  SCHOOL_ADMIN
  SECRETARY
  PROCUREMENT_OFFICER
  TEACHER
  STUDENT
  HR_MANAGER
  ACCOUNTANT
  LIBRARIAN
  TRANSPORT_MANAGER
  HOSTEL_WARDEN
  PARENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeFrequency {
  ONE_TIME
  MONTHLY
  TERMLY // Or SEMESTERLY
  ANNUALLY
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  VOID
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  MOBILE_MONEY
  ONLINE_GATEWAY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PurchaseOrderStatus {
  PENDING
  APPROVED
  REJECTED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

// --------------------
// CORE TENANCY & USERS
// --------------------

model School {
  id           String   @id @default(cuid())
  name         String   @unique
  address      String?
  contactInfo  String?
  logoUrl      String?
  subdomain    String?  @unique
  customDomain String?  @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Feature flags
  hasParentAppAccess      Boolean @default(false)
  hasAutoTimetable        Boolean @default(false)
  hasFinanceModule        Boolean @default(false)
  hasAdvancedHRModule     Boolean @default(false)
  hasProcurementModule    Boolean @default(false)
  hasLibraryModule        Boolean @default(false)
  hasTransportationModule Boolean @default(false)
  hasHostelModule         Boolean @default(false)

  // New timetable settings
  timetableStartTime String @default("08:00")
  timetableEndTime   String @default("17:00")

  // Relations
  users         User[]
  parents       Parent[]
  schoolLevels  SchoolLevel[]
  academicYears AcademicYear[]
  subjects      Subject[]
  staffMembers  Staff[]
  students      Student[]
  departments   Department[]
  announcements Announcement[]

  events                  Event[]
  gradingScales           GradingScale[]
  classes                 Class[]
  sections                Section[]
  studentEnrollments      StudentEnrollment[]
  staffLevelAssignments   StaffLevelAssignment[]
  staffSubjectLevels      StaffSubjectLevel[] // Back-relation from StaffSubjectLevel
  subjectSchoolLevelLinks SubjectSchoolLevel[] // Back-relation from SubjectSchoolLevel
  attendances             Attendance[]
  staffAttendances        StaffAttendance[]
  assignments             Assignment[]
  submittedAssignments    SubmittedAssignment[]
  grades                  Grade[]
  exams                   Exam[]
  examSchedules           ExamSchedule[]
  examSubjectLinks        ExamSubject[]
  timetableEntries        TimetableEntry[]
  feeStructures           FeeStructure[]
  invoices                Invoice[]
  expenses                Expense[]
  expenseCategories       ExpenseCategory[]
  vendors                 Vendor[]
  purchaseOrders          PurchaseOrder[]
  inventoryCategories     InventoryCategory[]
  inventoryItems          InventoryItem[]
  invoiceItems            InvoiceItem[]
  payments                Payment[]
  purchaseOrderItems      PurchaseOrderItem[]
  leaveTypes              LeaveType[]
  leaveApplications       LeaveApplication[]
  payrollRecords          PayrollRecord[]
  terms                   Term[]
  GradingWeightConfig     GradingWeightConfig[] // UPDATED: Now links to GradingScale
  buildings               Building[]
  rooms                   Room[]
  hostels                 Hostel[]
  vehicles                Vehicle[]
  routes                  Route[]
  drivers                 Driver[]
  books                   Book[]
  HostelRoom              HostelRoom[]

  @@index([subdomain])
  @@index([customDomain])
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  hashedPassword    String
  firstName         String?
  lastName          String?
  phoneNumber       String?
  profilePictureUrl String?
  role              UserRole
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  staffProfile   Staff? // One-to-one with Staff if user is staff
  studentProfile Student? // One-to-one with Student if user is student
  parentProfile  Parent? // One-to-one with Parent if user is parent

  staffAttendancesTaken   StaffAttendance[] @relation("StaffAttendanceTakenBy")
  studentAttendancesTaken Attendance[]      @relation("TakenBy")
  paymentsProcessed       Payment[]         @relation("ProcessedBy")
  expensesPaid            Expense[]         @relation("PaidByExpense")

  @@index([email])
  @@index([schoolId])
}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique // Link to User model
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students ParentStudent[] // Link to students
  schoolId String
  school   School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([schoolId])
}

// Linking table for Parent and Student (Many-to-Many)
model ParentStudent {
  parentId          String
  parent            Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  studentId         String
  student           Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  relationToStudent String?
  isPrimaryContact  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([parentId, studentId])
  @@index([studentId])
  @@index([parentId])
}

model SchoolLevel {
  id          String  @id @default(cuid())
  name        String
  description String?
  schoolId    String
  school      School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  classes               Class[]
  staffLevelAssignments StaffLevelAssignment[]
  staffSubjectLevels    StaffSubjectLevel[]    @relation("LevelSubjectsTaught")
  subjectLinks          SubjectSchoolLevel[]
  feeStructures         FeeStructure[]         @relation("LevelFeeStructures")

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GradingWeightConfig GradingWeightConfig[]
  // No direct relation to GradingScale here, it's done via GradingWeightConfig

  @@unique([schoolId, name])
  @@index([schoolId])
}

model AcademicYear {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean  @default(false)
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  terms               Term[]
  enrollments         StudentEnrollment[]
  grades              Grade[]
  feeStructures       FeeStructure[]        @relation("YearFeeStructures")
  classes             Class[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GradingWeightConfig GradingWeightConfig[]

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Term {
  id             String       @id @default(cuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  grades    Grade[]
  exams     Exam[]   @relation("TermExams")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([academicYearId, name])
  @@index([schoolId])
}

model Department {
  id          String  @id @default(cuid())
  name        String
  description String?
  schoolId    String
  school      School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  subjects  Subject[]
  staff     Staff[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Class {
  id             String       @id @default(cuid())
  name           String
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  schoolLevelId  String
  schoolLevel    SchoolLevel  @relation(fields: [schoolLevelId], references: [id], onDelete: Cascade)
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  sections            Section[]
  subjects            Subject[]             @relation("ClassSubjects")
  staffSubjectLevels  StaffSubjectLevel[]
  assignments         Assignment[]          @relation("ClassAssignments")
  feeStructures       FeeStructure[]        @relation("ClassFeeStructures")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GradingWeightConfig GradingWeightConfig[]

  @@unique([schoolId, name, academicYearId, schoolLevelId], map: "UQ_Class_School_Name_Year_Level")
  @@index([schoolId])
  @@index([schoolLevelId])
  @@index([academicYearId])
}

model Section {
  id             String  @id @default(cuid())
  name           String
  maxCapacity    Int?
  classId        String
  class          Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  classTeacherId String? @unique
  classTeacher   Staff?  @relation("ClassTeacherForSection", fields: [classTeacherId], references: [id], onDelete: SetNull)
  schoolId       String
  school         School  @relation(fields: [schoolId], references: [id], onDelete: Restrict)

  studentEnrollments StudentEnrollment[]
  timetableEntries   TimetableEntry[]
  attendances        Attendance[]        @relation("SectionAttendances")
  assignments        Assignment[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Grade              Grade[]
  examSchedules       ExamSchedule[]

  @@unique([classId, name], map: "UQ_Section_Class_Name")
  @@index([schoolId])
  @@index([classTeacherId])
}

model Subject {
  id           String      @id @default(cuid())
  name         String
  subjectCode  String?
  weeklyHours  Float?
  description  String?
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  schoolId     String
  school       School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  classes             Class[]               @relation("ClassSubjects")
  staffSubjectLevels  StaffSubjectLevel[]
  assignments         Assignment[]
  examSubjects        ExamSubject[]
  grades              Grade[]
  examSchedules       ExamSchedule[]        @relation("SubjectExamSchedules")
  timetableEntries    TimetableEntry[]      @relation("SubjectTimetableSlots")
  schoolLevelLinks    SubjectSchoolLevel[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GradingWeightConfig GradingWeightConfig[]

  @@unique([schoolId, name])
  @@unique([schoolId, subjectCode])
  @@index([schoolId])
}

// Explicit Many-to-Many linking table for Subjects and SchoolLevels
model SubjectSchoolLevel {
  id            String      @id @default(cuid())
  subjectId     String
  subject       Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  schoolLevelId String
  schoolLevel   SchoolLevel @relation(fields: [schoolLevelId], references: [id], onDelete: Cascade)
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  assignedAt    DateTime    @default(now())

  @@unique([subjectId, schoolLevelId, schoolId])
  @@index([schoolId])
}

model Student {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String
  middleName      String?
  studentIdNumber String
  admissionDate   DateTime  @default(now())
  dateOfBirth     DateTime?
  gender          Gender?
  email           String?   @unique
  phone           String?
  address         String?
  city            String?
  state           String?
  country         String?

  guardianName     String?
  guardianRelation String?
  guardianPhone    String?
  guardianEmail    String?

  userId   String? @unique
  user     User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  schoolId String
  school   School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  parents              ParentStudent[]
  enrollments          StudentEnrollment[]
  grades               Grade[]
  submittedAssignments SubmittedAssignment[]
  invoices             Invoice[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  hostelRoomId String?
  hostelRoom   HostelRoom? @relation(fields: [hostelRoomId], references: [id], onDelete: SetNull)

  @@unique([schoolId, studentIdNumber])
  @@index([userId])
  @@index([schoolId])
  @@index([hostelRoomId])
}

model StudentEnrollment {
  id             String       @id @default(cuid())
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  sectionId      String
  section        Section      @relation(fields: [sectionId], references: [id], onDelete: Restrict)
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Restrict)
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Restrict)

  enrollmentDate DateTime @default(now())
  isCurrent      Boolean  @default(true)
  status         String?
  rollNumber     String?

  attendances Attendance[] @relation("EnrollmentAttendances")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([studentId, academicYearId], map: "UQ_Student_AcademicYear_Enrollment")
  @@index([schoolId])
  @@index([sectionId])
  @@index([academicYearId])
  @@index([studentId])
}

model Staff {
  id            String      @id @default(cuid())
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffIdNumber String
  jobTitle      String
  qualification String?
  dateOfJoining DateTime    @default(now())
  departmentId  String?
  department    Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  isClassTeacherForSections Section[]              @relation("ClassTeacherForSection")
  assignedLevels            StaffLevelAssignment[]
  taughtSubjectLevels       StaffSubjectLevel[]
  assignmentsCreated        Assignment[]
  attendances               StaffAttendance[]
  leaveApplications         LeaveApplication[]
  payrollRecords            PayrollRecord[]
  timetableEntries          TimetableEntry[]
  hostels                   Hostel[]
  drivers                   Driver[]
  maxWeeklyTeachingHours    Float?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt

  @@unique([schoolId, staffIdNumber])
  @@index([userId])
  @@index([schoolId])
}

// Linking table for Staff and SchoolLevel (General assignment)
model StaffLevelAssignment {
  staffId       String
  staff         Staff       @relation(fields: [staffId], references: [id], onDelete: Cascade)
  schoolLevelId String
  schoolLevel   SchoolLevel @relation(fields: [schoolLevelId], references: [id], onDelete: Cascade)
  assignedAt    DateTime    @default(now())
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Restrict)

  @@id([staffId, schoolLevelId])
  @@index([schoolId])
}

// Linking table for Staff, Subject, SchoolLevel (and optionally Class)
model StaffSubjectLevel {
  id            String      @id @default(cuid())
  staffId       String
  staff         Staff       @relation(fields: [staffId], references: [id], onDelete: Cascade)
  subjectId     String
  subject       Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  schoolLevelId String
  schoolLevel   SchoolLevel @relation("LevelSubjectsTaught", fields: [schoolLevelId], references: [id], onDelete: Cascade)
  classId       String?
  class         Class?      @relation(fields: [classId], references: [id], onDelete: Cascade)
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([staffId, subjectId, schoolLevelId, classId, schoolId], map: "UQ_Staff_Subject_Level_Class_School")
  @@index([schoolId])
  @@index([staffId])
  @@index([subjectId])
  @@index([schoolLevelId])
  @@index([classId])
}

// --------------------
// ATTENDANCE
// --------------------
model Attendance {
  id                  String            @id @default(cuid())
  studentEnrollmentId String
  studentEnrollment   StudentEnrollment @relation("EnrollmentAttendances", fields: [studentEnrollmentId], references: [id], onDelete: Cascade)
  sectionId           String
  section             Section           @relation("SectionAttendances", fields: [sectionId], references: [id], onDelete: Cascade)
  date                DateTime          @db.Date
  status              AttendanceStatus
  remarks             String?
  takenById           String
  takenBy             User              @relation("TakenBy", fields: [takenById], references: [id], onDelete: Restrict)
  schoolId            String
  school              School            @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([studentEnrollmentId, date])
  @@unique([sectionId, date, studentEnrollmentId], map: "UQ_Attendance_Section_Date_Enrollment")
  @@index([schoolId, date])
  @@index([takenById])
}

model StaffAttendance {
  id        String           @id @default(cuid())
  staffId   String
  staff     Staff            @relation(fields: [staffId], references: [id], onDelete: Cascade)
  date      DateTime         @db.Date
  status    AttendanceStatus
  remarks   String?
  takenById String
  takenBy   User             @relation("StaffAttendanceTakenBy", fields: [takenById], references: [id], onDelete: Restrict)
  schoolId  String
  school    School           @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([staffId, date])
  @@index([schoolId, date])
  @@index([takenById])
}

// --------------------
// ASSIGNMENTS & GRADES
// --------------------
model Assignment {
  id                   String                @id @default(cuid())
  title                String
  description          String?               @db.Text
  dueDate              DateTime
  subjectId            String
  subject              Subject               @relation(fields: [subjectId], references: [id])
  sectionId            String?
  section              Section?              @relation(fields: [sectionId], references: [id])
  classId              String?
  class                Class?                @relation("ClassAssignments", fields: [classId], references: [id])
  teacherId            String
  teacher              Staff                 @relation(fields: [teacherId], references: [id])
  maxMarks             Float?
  attachments          Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  schoolId             String
  school               School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  submittedAssignments SubmittedAssignment[]
  Grade                Grade[]

  @@index([schoolId, subjectId])
  @@index([sectionId])
  @@index([classId])
}

model SubmittedAssignment {
  id            String     @id @default(cuid())
  assignmentId  String
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  submittedAt   DateTime   @default(now())
  content       String?    @db.Text
  attachments   Json?
  marksObtained Float?
  feedback      String?    @db.Text
  gradedById    String?
  gradedAt      DateTime?
  schoolId      String
  school        School     @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([assignmentId, studentId])
  @@index([schoolId])
}

model GradingScale {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  schoolId            String
  school              School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  gradeDetails        GradeDetail[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GradingWeightConfig GradingWeightConfig[]

  @@unique([schoolId, name])
}

model GradeDetail {
  id             String       @id @default(cuid())
  gradingScaleId String
  gradingScale   GradingScale @relation(fields: [gradingScaleId], references: [id], onDelete: Cascade)
  grade          String
  minPercentage  Float
  maxPercentage  Float
  gpaValue       Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([gradingScaleId, grade])
}

model Grade {
  id             String        @id @default(cuid())
  studentId      String
  student        Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subjectId      String
  subject        Subject       @relation(fields: [subjectId], references: [id])
  examScheduleId String?
  examSchedule   ExamSchedule? @relation(fields: [examScheduleId], references: [id], onDelete: SetNull)
  termId         String
  term           Term          @relation(fields: [termId], references: [id])
  academicYearId String
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id])
  marksObtained  Float?
  gradeLetter    String?
  gpa            Float?
  comments       String?
  schoolId       String
  sectionId      String // The ID of the section taking this specific exam
  section        Section       @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  school         School        @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // NEW: Link to Assignment (if grade is for an assignment)
  assignmentId String? // Foreign key to Assignment
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: SetNull)

  @@unique([studentId, examScheduleId, subjectId])
  @@index([studentId, subjectId, academicYearId])
  @@index([schoolId])
  @@index([assignmentId]) // New index
}

model GradingWeightConfig {
  id             String       @id @default(cuid())
  schoolId       String
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  schoolLevelId  String?
  schoolLevel    SchoolLevel? @relation(fields: [schoolLevelId], references: [id], onDelete: SetNull)
  classId        String?
  class          Class?       @relation(fields: [classId], references: [id], onDelete: SetNull)
  subjectId      String?
  subject        Subject?     @relation(fields: [subjectId], references: [id], onDelete: SetNull)

  gradingScaleId String? // NEW: Link to the GradingScale used for this configuration
  gradingScale   GradingScale? @relation(fields: [gradingScaleId], references: [id], onDelete: SetNull)

  examWeight       Float
  classworkWeight  Float
  assignmentWeight Float

  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, academicYearId, schoolLevelId, classId, subjectId])
  @@index([schoolId, academicYearId])
  @@index([schoolLevelId])
  @@index([classId])
  @@index([subjectId])
  @@index([gradingScaleId]) // NEW INDEX
}

model Exam {
  id               String         @id @default(cuid())
  name             String
  termId           String
  term             Term           @relation("TermExams", fields: [termId], references: [id], onDelete: Cascade)
  schoolId         String
  school           School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  examSchedules    ExamSchedule[] @relation("ExamSchedules")
  examSubjectLinks ExamSubject[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([schoolId, termId, name])
}

model ExamSchedule {
  id        String   @id @default(cuid())
  examId    String
  exam      Exam     @relation("ExamSchedules", fields: [examId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject  @relation("SubjectExamSchedules", fields: [subjectId], references: [id])
  date      DateTime
  startTime String
  endTime   String
  roomId    String?
  room      Room?    @relation("RoomTimetableSlots", fields: [roomId], references: [id], onDelete: SetNull)
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  grades    Grade[]
  sectionId   String
  section     Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  maxMarks  Float

  @@index([schoolId, examId, subjectId])
}

model ExamSubject {
  examId       String
  exam         Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  subjectId    String
  subject      Subject  @relation(fields: [subjectId], references: [id])
  maxMarks     Float?
  passingMarks Float?
  schoolId     String
  school       School   @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([examId, subjectId])
  @@index([schoolId])
}

// --------------------
// TIMETABLE
// --------------------
model TimetableEntry {
  id        String   @id @default(cuid())
  sectionId String
  section   Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject  @relation("SubjectTimetableSlots", fields: [subjectId], references: [id])
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id])
  dayOfWeek Int
  startTime String
  endTime   String
  roomId    String?
  room      Room?    @relation("TimetableRoomSlots", fields: [roomId], references: [id], onDelete: SetNull)
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, sectionId, dayOfWeek, startTime])
  @@unique([schoolId, staffId, dayOfWeek, startTime])
  @@unique([schoolId, roomId, dayOfWeek, startTime])
  @@index([schoolId, sectionId, dayOfWeek])
  @@index([schoolId, staffId, dayOfWeek])
  @@index([schoolId, roomId, dayOfWeek])
}

// --------------------
// COMMUNICATION
// --------------------
model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  publishedAt DateTime?
  audience    Json?
  isGlobal    Boolean   @default(false)
  schoolId    String?
  school      School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId, publishedAt])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  startDate   DateTime
  endDate     DateTime?
  location    String?
  isGlobal    Boolean   @default(false)
  schoolId    String?
  school      School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId, startDate])
}

// --------------------
// FINANCE MODULE
// --------------------
model FeeStructure {
  id             String        @id @default(cuid())
  name           String
  description    String?
  amount         Float
  frequency      FeeFrequency
  academicYearId String
  academicYear   AcademicYear  @relation("YearFeeStructures", fields: [academicYearId], references: [id])
  classId        String?
  class          Class?        @relation("ClassFeeStructures", fields: [classId], references: [id])
  schoolLevelId  String?
  schoolLevel    SchoolLevel?  @relation("LevelFeeStructures", fields: [schoolLevelId], references: [id], onDelete: SetNull)
  schoolId       String
  school         School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  invoiceItems   InvoiceItem[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([schoolId, name, academicYearId, classId, schoolLevelId])
  @@index([schoolId])
  @@index([academicYearId])
  @@index([classId])
  @@index([schoolLevelId])
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  studentId     String
  student       Student       @relation(fields: [studentId], references: [id], onDelete: Restrict)
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  totalAmount   Float
  paidAmount    Float         @default(0)
  status        InvoiceStatus @default(DRAFT)
  notes         String?
  schoolId      String
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  items         InvoiceItem[]
  payments      Payment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([schoolId, studentId, status])
}

model InvoiceItem {
  id              String         @id @default(cuid())
  invoiceId       String
  invoice         Invoice        @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  feeStructureId  String?
  feeStructure    FeeStructure?  @relation(fields: [feeStructureId], references: [id], onDelete: SetNull)
  description     String
  quantity        Int            @default(1)
  unitPrice       Float
  totalPrice      Float
  inventoryItemId String?
  inventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [id], onDelete: SetNull)
  schoolId        String
  school          School         @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([schoolId])
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Restrict)
  paymentDate   DateTime      @default(now())
  amount        Float
  paymentMethod PaymentMethod
  referenceId   String?
  notes         String?
  processedById String? // User ID
  processedBy   User?         @relation("ProcessedBy", fields: [processedById], references: [id], onDelete: SetNull)
  schoolId      String
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([schoolId, invoiceId])
  @@index([processedById])
}

model ExpenseCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  schoolId    String
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  expenses    Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([schoolId, name])
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  categoryId  String
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  vendorId    String?
  vendor      Vendor?         @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  receiptUrl  String?
  paidById    String // User ID of staff who recorded/paid
  paidBy      User            @relation("PaidByExpense", fields: [paidById], references: [id], onDelete: Restrict)
  schoolId    String
  school      School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([schoolId, date])
  @@index([paidById])
}

model LeaveType {
  id                String             @id @default(cuid())
  name              String
  defaultDays       Int?
  schoolId          String
  school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  leaveApplications LeaveApplication[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([schoolId, name])
}

model LeaveApplication {
  id           String      @id @default(cuid())
  staffId      String
  staff        Staff       @relation(fields: [staffId], references: [id])
  leaveTypeId  String
  leaveType    LeaveType   @relation(fields: [leaveTypeId], references: [id])
  startDate    DateTime
  endDate      DateTime
  reason       String?
  status       LeaveStatus @default(PENDING)
  approvedById String?
  comments     String?
  appliedOn    DateTime    @default(now())
  schoolId     String
  school       School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([schoolId, staffId, status])
}

model PayrollRecord {
  id             String    @id @default(cuid())
  staffId        String
  staff          Staff     @relation(fields: [staffId], references: [id])
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  basicSalary    Float
  allowances     Float?
  deductions     Float?
  netSalary      Float
  paymentDate    DateTime?
  isPaid         Boolean   @default(false)
  schoolId       String
  school         School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([staffId, payPeriodStart, payPeriodEnd])
  @@index([schoolId])
}

model Vendor {
  id             String          @id @default(cuid())
  name           String
  contactPerson  String?
  email          String?
  phone          String?
  address        String?
  schoolId       String
  school         School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]
  expenses       Expense[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}

model PurchaseOrder {
  id                   String              @id @default(cuid())
  orderNumber          String              @unique
  vendorId             String
  vendor               Vendor              @relation(fields: [vendorId], references: [id])
  orderDate            DateTime            @default(now())
  expectedDeliveryDate DateTime?
  totalAmount          Float
  status               PurchaseOrderStatus @default(PENDING)
  notes                String?
  approvedById         String?
  schoolId             String
  school               School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  items                PurchaseOrderItem[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@index([schoolId, vendorId])
}

model PurchaseOrderItem {
  id              String         @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  itemName        String
  description     String?
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  inventoryItemId String?
  inventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [id], onDelete: SetNull)
  schoolId        String
  school          School         @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([schoolId])
}

model InventoryCategory {
  id        String          @id @default(cuid())
  name      String
  schoolId  String
  school    School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  items     InventoryItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([schoolId, name])
}

model InventoryItem {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  categoryId         String?
  category           InventoryCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  quantityInStock    Int                 @default(0)
  reorderLevel       Int?
  supplierInfo       String?
  schoolId           String
  school             School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  purchaseOrderItems PurchaseOrderItem[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  InvoiceItem        InvoiceItem[]

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Building {
  id        String   @id @default(cuid())
  name      String
  location  String?
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  rooms     Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Room {
  id               String           @id @default(cuid())
  name             String
  roomType         String?
  capacity         Int?
  buildingId       String?
  building         Building?        @relation(fields: [buildingId], references: [id], onDelete: SetNull)
  schoolId         String
  school           School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  examSchedules    ExamSchedule[]   @relation("RoomTimetableSlots")
  timetableEntries TimetableEntry[] @relation("TimetableRoomSlots")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
  @@index([buildingId])
}

// --------------------
// HOSTEL MODULE
// --------------------

model Hostel {
  id               String       @id @default(cuid())
  name             String
  genderPreference String?
  capacity         Int?
  wardenId         String?
  warden           Staff?       @relation(fields: [wardenId], references: [id], onDelete: SetNull)
  schoolId         String
  school           School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  rooms            HostelRoom[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
  @@index([wardenId])
}

model HostelRoom {
  id               String    @id @default(cuid())
  roomNumber       String
  hostelId         String
  hostel           Hostel    @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  roomType         String?
  bedCapacity      Int
  currentOccupancy Int       @default(0)
  pricePerTerm     Float?
  schoolId         String
  school           School    @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  students         Student[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([hostelId, roomNumber])
  @@index([schoolId])
  @@index([hostelId])
}

// --------------------
// TRANSPORTATION MODULE
// --------------------

model Vehicle {
  id                 String   @id @default(cuid())
  registrationNumber String   @unique
  make               String?
  model              String?
  capacity           Int?
  status             String?
  schoolId           String
  school             School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([schoolId, registrationNumber])
  @@index([schoolId])
}

model Route {
  id          String   @id @default(cuid())
  name        String
  description String?
  stops       Json?
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Driver {
  id            String   @id @default(cuid())
  staffId       String   @unique
  staff         Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  licenseNumber String   @unique
  contactNumber String?
  schoolId      String
  school        School   @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([schoolId, staffId])
  @@unique([schoolId, licenseNumber])
  @@index([schoolId])
  @@index([staffId])
}

// --------------------
// LIBRARY MODULE
// --------------------

model Book {
  id              String   @id @default(cuid())
  title           String
  author          String
  isbn            String?  @unique
  publicationYear Int?
  genre           String?
  copiesAvailable Int      @default(1)
  schoolId        String
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([schoolId, isbn])
  @@index([schoolId])
  @@index([title])
  @@index([author])
}
