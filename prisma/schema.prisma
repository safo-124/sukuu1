// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your chosen database (e.g., mysql)
  url      = env("DATABASE_URL")
}

// --------------------
// ENUMS
// --------------------

enum UserRole {
  SUPER_ADMIN
  SCHOOL_ADMIN
  SECRETARY
  PROCUREMENT_OFFICER
  TEACHER
  STUDENT
  HR_MANAGER
  ACCOUNTANT
  LIBRARIAN
  TRANSPORT_MANAGER
  HOSTEL_WARDEN
  PARENT
}

enum Gender { // Example, can be customized
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeFrequency {
  ONE_TIME
  MONTHLY
  TERMLY // Or SEMESTERLY
  ANNUALLY
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  VOID
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  MOBILE_MONEY
  ONLINE_GATEWAY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PurchaseOrderStatus {
  PENDING
  APPROVED
  REJECTED
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}


// --------------------
// CORE TENANCY & USERS
// --------------------

model School {
  id          String   @id @default(cuid())
  name        String   @unique
  address     String?
  contactInfo String?
  logoUrl     String?
  subdomain   String?  @unique
  customDomain String?  @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Feature flags
  hasParentAppAccess      Boolean @default(false)
  hasAutoTimetable        Boolean @default(false)
  hasFinanceModule        Boolean @default(false)
  hasAdvancedHRModule     Boolean @default(false)
  hasProcurementModule    Boolean @default(false)
  hasLibraryModule        Boolean @default(false)
  hasTransportationModule Boolean @default(false)
  hasHostelModule         Boolean @default(false)

  // Relations
  users                   User[]
  parents                 Parent[]
  schoolLevels            SchoolLevel[]
  academicYears           AcademicYear[]
  subjects                Subject[]
  staffMembers            Staff[]
  students                Student[]
  departments             Department[]
  announcements           Announcement[]
  events                  Event[]
  gradingScales           GradingScale[]
  classes                 Class[]
  sections                Section[]
  studentEnrollments      StudentEnrollment[]
  staffLevelAssignments   StaffLevelAssignment[]
  staffSubjectLevels      StaffSubjectLevel[]   // Back-relation from StaffSubjectLevel
  subjectSchoolLevelLinks SubjectSchoolLevel[]  // Back-relation from SubjectSchoolLevel
  attendances             Attendance[]
  staffAttendances        StaffAttendance[]
  assignments             Assignment[]
  submittedAssignments    SubmittedAssignment[]
  grades                  Grade[]
  exams                   Exam[]
  examSchedules           ExamSchedule[]
  examSubjectLinks        ExamSubject[]
  timetableEntries        TimetableEntry[]
  feeStructures           FeeStructure[]
  invoices                Invoice[]
  expenses                Expense[]
  expenseCategories       ExpenseCategory[]
  vendors                 Vendor[]
  purchaseOrders          PurchaseOrder[]
  inventoryCategories     InventoryCategory[]
  inventoryItems          InventoryItem[]
  invoiceItems            InvoiceItem[]
  payments                Payment[]
  purchaseOrderItems      PurchaseOrderItem[]
  leaveTypes              LeaveType[]
  leaveApplications       LeaveApplication[]
  payrollRecords          PayrollRecord[]
  terms                   Term[]                // Corrected from 'Term' to 'terms' for consistency

  @@index([subdomain])
  @@index([customDomain])
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  hashedPassword      String
  firstName           String?
  lastName            String?
  phoneNumber         String?
  profilePictureUrl   String?
  role                UserRole
  isActive            Boolean   @default(true)
  lastLogin           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  schoolId            String?
  school              School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  staffProfile        Staff?    // One-to-one with Staff if user is staff
  studentProfile      Student?  // One-to-one with Student if user is student
  parentProfile       Parent?   // One-to-one with Parent if user is parent

  @@index([email])
  @@index([schoolId])
}

model Parent {
  id                  String          @id @default(cuid())
  userId              String          @unique // Link to User model
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  address             String?
  // Add other parent-specific fields like occupation, etc.
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  students            ParentStudent[] // Link to students
  schoolId            String
  school              School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([schoolId])
}

// Linking table for Parent and Student (Many-to-Many)
model ParentStudent {
  parentId            String
  parent              Parent          @relation(fields: [parentId], references: [id], onDelete: Cascade)
  studentId           String
  student             Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  relationToStudent   String?         // e.g., "Father", "Mother", "Guardian"
  isPrimaryContact    Boolean         @default(false) // Optional: to mark primary contact

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@id([parentId, studentId])
  @@index([studentId])
  @@index([parentId])
}


// --------------------
// ACADEMICS & SCHOOL STRUCTURE
// --------------------
model SchoolLevel {
  id                    String                 @id @default(cuid())
  name                  String
  description           String?
  schoolId              String
  school                School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  classes               Class[]                // Classes within this level
  staffLevelAssignments StaffLevelAssignment[] // Staff assigned to this level
  staffSubjectLevels    StaffSubjectLevel[]    @relation("LevelSubjectsTaught") // Subjects taught at this level by staff
  subjectLinks          SubjectSchoolLevel[]   // Subjects that exist at this level

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([schoolId, name])
  @@index([schoolId])
}

model AcademicYear {
  id              String                @id @default(cuid())
  name            String                // e.g., "2024-2025"
  startDate       DateTime
  endDate         DateTime
  isCurrent       Boolean               @default(false)
  schoolId        String
  school          School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  terms           Term[]
  enrollments     StudentEnrollment[]
  grades          Grade[]
  feeStructures   FeeStructure[]        @relation("YearFeeStructures")
  classes         Class[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Term { // Or Semester
  id              String        @id @default(cuid())
  name            String        // e.g., "Term 1", "Fall Semester"
  startDate       DateTime
  endDate         DateTime
  academicYearId  String
  academicYear    AcademicYear  @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  schoolId        String
  school          School        @relation(fields: [schoolId], references: [id], onDelete: Cascade) // Explicit relation to School
  
  grades          Grade[]
  exams           Exam[]        @relation("TermExams")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([academicYearId, name]) // Term name unique within an academic year
  @@index([schoolId])
}

model Department {
  id            String    @id @default(cuid())
  name          String
  description   String?
  // headOfDepartmentId String? // Optional: Link to a Staff member (User ID or Staff ID)
  // headOfDepartment Staff? @relation("DepartmentHead", fields: [headOfDepartmentId], references: [id], onDelete: SetNull)
  schoolId      String
  school        School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  subjects      Subject[] // Subjects belonging to this department
  staff         Staff[]   // Staff members in this department
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Class { // Represents a grade level or standard, e.g., "Grade 10"
  id              String        @id @default(cuid())
  name            String        // e.g., "Grade 10", "Class 7"
  schoolId        String
  school          School        @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  schoolLevelId   String
  schoolLevel     SchoolLevel   @relation(fields: [schoolLevelId], references: [id], onDelete: Cascade)
  academicYearId  String
  academicYear    AcademicYear  @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  
  sections            Section[]
  subjects            Subject[]             @relation("ClassSubjects") // Implicit M2M for subjects taught in this class by default
  staffSubjectLevels  StaffSubjectLevel[]   // Explicit links for which teacher teaches which subject in this class (if needed at class level)
  assignments         Assignment[]          @relation("ClassAssignments")
  feeStructures       FeeStructure[]        @relation("ClassFeeStructures")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@unique([schoolId, name, academicYearId, schoolLevelId], map: "UQ_Class_School_Name_Year_Level")
  @@index([schoolId])
  @@index([schoolLevelId])
  @@index([academicYearId])
}

model Section { // Represents a division of a class, e.g., "Grade 10 A"
  id              String    @id @default(cuid())
  name            String    // e.g., "A", "Blue"
  maxCapacity     Int?
  classId         String
  class           Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classTeacherId  String?   @unique // If a teacher can only be class teacher of ONE section
  classTeacher    Staff?    @relation("ClassTeacherForSection", fields: [classTeacherId], references: [id], onDelete: SetNull)
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  
  studentEnrollments  StudentEnrollment[]
  timetableEntries    TimetableEntry[]
  attendances         Attendance[]          @relation("SectionAttendances")
  assignments         Assignment[]          // Assignments can be targeted to a section
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@unique([classId, name], map: "UQ_Section_Class_Name")
  @@index([schoolId])
  @@index([classTeacherId])
}

model Subject {
  id                  String                 @id @default(cuid())
  name                String
  subjectCode         String?
  weeklyHours         Float?
  description         String?
  departmentId        String?
  department          Department?            @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  schoolId            String
  school              School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  classes             Class[]                @relation("ClassSubjects") // Implicit M2M if subject is generally available to classes
  staffSubjectLevels  StaffSubjectLevel[]    // Explicit links: which teachers teach this subject at which levels/classes
  assignments         Assignment[]
  examSubjects        ExamSubject[]
  grades              Grade[]
  examSchedules       ExamSchedule[]         @relation("SubjectExamSchedules")
  timetableEntries    TimetableEntry[]       @relation("SubjectTimetableSlots")
  schoolLevelLinks    SubjectSchoolLevel[]   // Explicit M2M: which school levels offer this subject
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  
  @@unique([schoolId, name])
  @@unique([schoolId, subjectCode]) // If subject codes must be unique per school
  @@index([schoolId])
}

// Explicit Many-to-Many linking table for Subjects and SchoolLevels
model SubjectSchoolLevel {
  id            String      @id @default(cuid())
  subjectId     String
  subject       Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  schoolLevelId String
  schoolLevel   SchoolLevel @relation(fields: [schoolLevelId], references: [id], onDelete: Cascade)
  schoolId      String      
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  assignedAt    DateTime    @default(now())

  @@unique([subjectId, schoolLevelId, schoolId])
  @@index([schoolId])
}

model Student {
  id                  String                @id @default(cuid())
  firstName           String
  lastName            String
  middleName          String?
  studentIdNumber     String                // Admission Number
  admissionDate       DateTime              @default(now())
  dateOfBirth         DateTime?
  gender              Gender?               // Using Gender enum
  email               String?               @unique // Student's own email, optional
  phone               String?
  address             String?
  city                String?
  state               String?
  country             String?
  
  // Guardian Information (direct storage on student model for simplicity)
  guardianName        String? 
  guardianRelation    String? 
  guardianPhone       String?
  guardianEmail       String? // Could be @unique if not nullable and used for parent login

  userId              String?               @unique // Optional link to a User account
  user                User?                 @relation(fields: [userId], references: [id], onDelete: SetNull)
  schoolId            String
  school              School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  parents             ParentStudent[]       // For multiple parent/guardian records
  enrollments         StudentEnrollment[]
  grades              Grade[]
  submittedAssignments SubmittedAssignment[]
  invoices            Invoice[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@unique([schoolId, studentIdNumber])
  @@index([userId])
  @@index([schoolId])
}

model StudentEnrollment {
  id              String        @id @default(cuid())
  studentId       String
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  sectionId       String
  section         Section       @relation(fields: [sectionId], references: [id], onDelete: Restrict)
  academicYearId  String
  academicYear    AcademicYear  @relation(fields: [academicYearId], references: [id], onDelete: Restrict)
  schoolId        String
  school          School        @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  
  enrollmentDate  DateTime      @default(now())
  isCurrent       Boolean       @default(true)
  status          String?       // e.g., "Active", "Transferred", "Graduated", "Withdrawn" 
  rollNumber      String?
  
  attendances     Attendance[]  @relation("EnrollmentAttendances")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([studentId, academicYearId], map: "UQ_Student_AcademicYear_Enrollment")
  @@index([schoolId])
  @@index([sectionId])
  @@index([academicYearId])
  @@index([studentId])
}

model Staff {
  id                        String                 @id @default(cuid())
  userId                    String                 @unique
  user                      User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffIdNumber             String                 // School-specific ID
  jobTitle                  String                 // e.g., "Mathematics Teacher", "Accountant"
  qualification             String?
  dateOfJoining             DateTime               @default(now())
  departmentId              String?
  department                Department?            @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  schoolId                  String
  school                    School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  isClassTeacherForSections Section[]              @relation("ClassTeacherForSection") // If a teacher can be class teacher for multiple sections
  assignedLevels            StaffLevelAssignment[] // Staff assigned to general school levels
  taughtSubjectLevels       StaffSubjectLevel[]    // Specific subjects taught by this staff at specific levels/classes
  assignmentsCreated        Assignment[]
  attendances               StaffAttendance[]
  leaveApplications         LeaveApplication[]
  payrollRecords            PayrollRecord[]
  timetableEntries          TimetableEntry[]
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt

  @@unique([schoolId, staffIdNumber])
  @@index([userId])
  @@index([schoolId])
}

// Linking table for Staff and SchoolLevel (General assignment)
model StaffLevelAssignment {
  staffId       String
  staff         Staff       @relation(fields: [staffId], references: [id], onDelete: Cascade)
  schoolLevelId String
  schoolLevel   SchoolLevel @relation(fields: [schoolLevelId], references: [id], onDelete: Cascade)
  assignedAt    DateTime    @default(now())
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Restrict)

  @@id([staffId, schoolLevelId])
  @@index([schoolId])
}

// Linking table for Staff, Subject, SchoolLevel (and optionally Class)
model StaffSubjectLevel {
  id            String      @id @default(cuid())
  staffId       String
  staff         Staff       @relation(fields: [staffId], references: [id], onDelete: Cascade)
  subjectId     String
  subject       Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  schoolLevelId String      // Subject taught by this staff AT THIS LEVEL
  schoolLevel   SchoolLevel @relation("LevelSubjectsTaught", fields: [schoolLevelId], references: [id], onDelete: Cascade)
  classId       String?     // Optional: if assignment is granular to a specific class
  class         Class?      @relation(fields: [classId], references: [id], onDelete: Cascade)
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([staffId, subjectId, schoolLevelId, classId, schoolId], map: "UQ_Staff_Subject_Level_Class_School")
  @@index([schoolId])
  @@index([staffId])
  @@index([subjectId])
  @@index([schoolLevelId])
  @@index([classId])
}


// --------------------
// ATTENDANCE
// --------------------
model Attendance {
  id                  String            @id @default(cuid())
  studentEnrollmentId String
  studentEnrollment   StudentEnrollment @relation("EnrollmentAttendances", fields: [studentEnrollmentId], references: [id], onDelete: Cascade)
  sectionId           String            // Denormalized for easier queries, but linked via studentEnrollment
  section             Section           @relation("SectionAttendances", fields: [sectionId], references: [id], onDelete: Cascade)
  date                DateTime          @db.Date
  status              AttendanceStatus
  remarks             String?
  takenById           String            // User ID of the staff who took attendance
  schoolId            String
  school              School            @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([studentEnrollmentId, date])
  @@unique([sectionId, date, studentEnrollmentId], map: "UQ_Attendance_Section_Date_Enrollment")
  @@index([schoolId, date])
}

model StaffAttendance {
  id        String            @id @default(cuid())
  staffId   String
  staff     Staff             @relation(fields: [staffId], references: [id], onDelete: Cascade)
  date      DateTime          @db.Date
  status    AttendanceStatus
  remarks   String?
  schoolId  String
  school    School            @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([staffId, date])
  @@index([schoolId, date])
}

// --------------------
// ASSIGNMENTS & GRADES
// --------------------
model Assignment {
  id                   String                 @id @default(cuid())
  title                String
  description          String?                @db.Text
  dueDate              DateTime
  subjectId            String
  subject              Subject                @relation(fields: [subjectId], references: [id])
  sectionId            String?                
  section              Section?               @relation(fields: [sectionId], references: [id])
  classId              String?                
  class                Class?                 @relation("ClassAssignments", fields: [classId], references: [id])
  teacherId            String                 // Staff ID of teacher who created it
  teacher              Staff                  @relation(fields: [teacherId], references: [id])
  maxMarks             Float?
  attachments          Json?                  // Array of file URLs or identifiers
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  schoolId             String
  school               School                 @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  submittedAssignments SubmittedAssignment[]

  @@index([schoolId, subjectId])
  @@index([sectionId])
  @@index([classId])
}

model SubmittedAssignment {
  id            String      @id @default(cuid())
  assignmentId  String
  assignment    Assignment  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  submittedAt   DateTime    @default(now())
  content       String?     @db.Text // For text submissions
  attachments   Json?       // Array of file URLs or identifiers
  marksObtained Float?
  feedback      String?     @db.Text
  gradedById    String?     // Staff ID of grader
  gradedAt      DateTime?
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([assignmentId, studentId])
  @@index([schoolId])
}

model GradingScale {
  id            String        @id @default(cuid())
  name          String        // e.g., "Standard A-F", "Percentage Grading"
  description   String?
  schoolId      String
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  gradeDetails  GradeDetail[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([schoolId, name])
}

model GradeDetail { // Part of a GradingScale
  id             String       @id @default(cuid())
  gradingScaleId String
  gradingScale   GradingScale @relation(fields: [gradingScaleId], references: [id], onDelete: Cascade)
  grade          String       // e.g., "A+", "A", "Pass"
  minPercentage  Float
  maxPercentage  Float
  gpaValue       Float?       // Optional GPA value for this grade
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([gradingScaleId, grade])
}

model Grade { // Final grade for a subject in an exam/term
  id              String        @id @default(cuid())
  studentId       String
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subjectId       String
  subject         Subject       @relation(fields: [subjectId], references: [id])
  examScheduleId  String?       // Link to specific exam if applicable
  examSchedule    ExamSchedule? @relation(fields: [examScheduleId], references: [id], onDelete: SetNull)
  termId          String        // Link to term if it's a term grade
  term            Term          @relation(fields: [termId], references: [id])
  academicYearId  String
  academicYear    AcademicYear  @relation(fields: [academicYearId], references: [id])
  marksObtained   Float?
  gradeLetter     String?
  gpa             Float?
  comments        String?
  schoolId        String
  school          School        @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([studentId, subjectId, academicYearId])
  @@index([schoolId])
}

// --------------------
// EXAMINATIONS
// --------------------
model Exam {
  id                String           @id @default(cuid())
  name              String           // e.g., "Mid-Term Exams", "Final Exams"
  termId            String           // Which term these exams belong to
  term              Term             @relation("TermExams", fields: [termId], references: [id], onDelete: Cascade)
  schoolId          String
  school            School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  examSchedules     ExamSchedule[]   @relation("ExamSchedules")
  examSubjectLinks  ExamSubject[]    // Subjects included in this exam type
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([schoolId, termId, name])
}

model ExamSchedule { // Specific schedule for a subject within an exam
  id          String    @id @default(cuid())
  examId      String
  exam        Exam      @relation("ExamSchedules", fields: [examId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject   @relation("SubjectExamSchedules", fields: [subjectId], references: [id])
  date        DateTime
  startTime   String    // Store as HH:MM
  endTime     String    // Store as HH:MM
  maxMarks    Float
  room        String?   // Exam room
  schoolId    String
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  grades      Grade[]   // Grades associated with this specific exam instance
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId, examId, subjectId])
}

model ExamSubject { // Link table if a subject can have different properties per exam type (e.g. different max marks)
  examId        String
  exam          Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  subjectId     String
  subject       Subject   @relation(fields: [subjectId], references: [id])
  maxMarks      Float?
  passingMarks  Float?
  schoolId      String
  school        School    @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@id([examId, subjectId])
  @@index([schoolId])
}

// --------------------
// TIMETABLE
// --------------------
model TimetableEntry {
  id          String    @id @default(cuid())
  sectionId   String
  section     Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject   @relation("SubjectTimetableSlots", fields: [subjectId], references: [id])
  staffId     String    // Staff (Teacher) ID
  staff       Staff     @relation(fields: [staffId], references: [id])
  dayOfWeek   Int       // 0 for Sunday, 1 for Monday, ..., 6 for Saturday (JS Date standard) or 1-7
  startTime   String    // HH:MM format
  endTime     String    // HH:MM format
  roomNo      String?
  schoolId    String
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([schoolId, sectionId, dayOfWeek])
  @@index([schoolId, staffId, dayOfWeek]) // For teacher's timetable
}

// --------------------
// COMMUNICATION
// --------------------
model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String    @db.Text
  publishedAt   DateTime?
  audience      Json?     // e.g., ["ALL", "TEACHERS", "STUDENTS_GRADE_10", "PARENTS_SECTION_A"]
  isGlobal      Boolean   @default(false) // Global to all schools (for SUPER_ADMIN) or school-specific
  schoolId      String?   // Nullable if isGlobal = true
  school        School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  authorId      String    // User ID of author
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([schoolId, publishedAt])
}

model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  startDate     DateTime
  endDate       DateTime?
  location      String?
  // audience   Json?  // Similar to Announcement audience
  isGlobal      Boolean   @default(false)
  schoolId      String?
  school        School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  // organizerId String // User ID
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([schoolId, startDate])
}

// --------------------
// FINANCE MODULE
// --------------------
model FeeStructure {
  id              String        @id @default(cuid())
  name            String
  description     String?
  amount          Float
  frequency       FeeFrequency
  academicYearId  String
  academicYear    AcademicYear  @relation("YearFeeStructures", fields: [academicYearId], references: [id])
  classId         String?       
  class           Class?        @relation("ClassFeeStructures", fields: [classId], references: [id])
  schoolId        String
  school          School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  invoiceItems    InvoiceItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([schoolId, name, academicYearId, classId])
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique 
  studentId     String
  student       Student       @relation(fields: [studentId], references: [id], onDelete: Restrict) // Restrict to avoid deleting student with invoices
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  totalAmount   Float
  paidAmount    Float         @default(0)
  status        InvoiceStatus @default(DRAFT)
  notes         String?
  schoolId      String
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  items         InvoiceItem[]
  payments      Payment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([schoolId, studentId, status])
}

model InvoiceItem {
  id              String        @id @default(cuid())
  invoiceId       String
  invoice         Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  feeStructureId  String?       
  feeStructure    FeeStructure? @relation(fields: [feeStructureId], references: [id], onDelete: SetNull)
  description     String        
  quantity        Int           @default(1)
  unitPrice       Float
  totalPrice      Float         
  schoolId        String
  school          School        @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([schoolId])
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Restrict) // Restrict deletion of invoice if payments exist
  paymentDate   DateTime      @default(now())
  amount        Float
  paymentMethod PaymentMethod
  referenceId   String?       
  notes         String?
  processedById String?       
  schoolId      String
  school        School        @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([schoolId, invoiceId])
}

model ExpenseCategory {
  id            String    @id @default(cuid())
  name          String
  description   String?
  schoolId      String
  school        School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  expenses      Expense[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([schoolId, name])
}

model Expense {
  id            String          @id @default(cuid())
  description   String
  amount        Float
  date          DateTime
  categoryId    String
  category      ExpenseCategory @relation(fields: [categoryId], references: [id])
  vendorId      String?
  vendor        Vendor?         @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  receiptUrl    String?
  paidById      String          // User ID of staff who recorded/paid
  schoolId      String
  school        School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([schoolId, date])
}

// --------------------
// HR MODULE
// --------------------
model LeaveType {
  id                  String              @id @default(cuid())
  name                String
  defaultDays         Int?                
  schoolId            String
  school              School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  leaveApplications   LeaveApplication[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@unique([schoolId, name])
}

model LeaveApplication {
  id            String      @id @default(cuid())
  staffId       String
  staff         Staff       @relation(fields: [staffId], references: [id])
  leaveTypeId   String
  leaveType     LeaveType   @relation(fields: [leaveTypeId], references: [id])
  startDate     DateTime
  endDate       DateTime
  reason        String?
  status        LeaveStatus @default(PENDING)
  approvedById  String?     
  comments      String?
  appliedOn     DateTime    @default(now())
  schoolId      String
  school        School      @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([schoolId, staffId, status])
}

model PayrollRecord {
  id              String    @id @default(cuid())
  staffId         String
  staff           Staff     @relation(fields: [staffId], references: [id])
  payPeriodStart  DateTime
  payPeriodEnd    DateTime
  basicSalary     Float
  allowances      Float?
  deductions      Float?
  netSalary       Float
  paymentDate     DateTime?
  isPaid          Boolean   @default(false)
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([staffId, payPeriodStart, payPeriodEnd])
  @@index([schoolId])
}

// --------------------
// PROCUREMENT MODULE
// --------------------
model Vendor {
  id              String           @id @default(cuid())
  name            String
  contactPerson   String?
  email           String?
  phone           String?
  address         String?
  schoolId        String
  school          School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  purchaseOrders  PurchaseOrder[]
  expenses        Expense[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}

model PurchaseOrder {
  id                    String              @id @default(cuid())
  orderNumber           String              @unique 
  vendorId              String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  orderDate             DateTime            @default(now())
  expectedDeliveryDate  DateTime?
  totalAmount           Float
  status                PurchaseOrderStatus @default(PENDING)
  notes                 String?
  approvedById          String?             
  schoolId              String
  school                School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  items                 PurchaseOrderItem[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([schoolId, vendorId])
}

model PurchaseOrderItem {
  id                String          @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  itemName          String
  description       String?
  quantity          Int
  unitPrice         Float
  totalPrice        Float           
  inventoryItemId   String?         
  inventoryItem     InventoryItem?  @relation(fields: [inventoryItemId], references: [id], onDelete: SetNull)
  schoolId          String
  school            School          @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([schoolId])
}

model InventoryCategory {
  id        String          @id @default(cuid())
  name      String
  schoolId  String
  school    School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  items     InventoryItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([schoolId, name])
}

model InventoryItem {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  categoryId          String?
  category            InventoryCategory?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  quantityInStock     Int                  @default(0)
  reorderLevel        Int?                 
  supplierInfo        String?
  schoolId            String
  school              School               @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  purchaseOrderItems  PurchaseOrderItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
}